// TOH HONG XIANG	7	TOHH0023
// WENG MICHELLE	7	N2303578B
// WILLIS YANG XIANZU	7	WILL0049

// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */

/* A module consists of the keyword module, followed by an identifier (which is the modules name), followed by an opening curly brace, 
followed by imports, followed by declarations, followed by a closing curly brace */
Module = MODULE ID LCURLY Imports Declarations RCURLY ;

/* A modules imports (nonterminal Imports) specify what other modules this module will import. They consist
of zero or more import statements */
Imports = Import Imports
        | 
        ;

/* An import statement (nonterminal Import) consists of the keyword import, followed by an identifier, followed by a semicolon */
Import = IMPORT ID SEMICOLON ;

/* A modules declarations (nonterminal Declarations) consist of zero or more declarations */
Declarations = Declaration Declarations
             |
             ;

/* A declaration is either a function declaration, or a field declaration, or a type declaration */
Declaration = FuncDeclaration
            | FieldDeclaration
            | TypeDeclaration
            ;

/* A function declaration consists of an accessibility specifier, a type name, an identifier, an opening parenthesis,
a parameter list, a closing parenthesis, an opening curly brace, a possibly empty list of statements, and a closing
curly brace */
FuncDeclaration = AccessibilitySpecifier TypeName ID LPAREN ParameterList RPAREN LCURLY StatementLists RCURLY ;

/* A possibly empty list of statementlists in a function */
StatementLists = Statement StatementLists
               |
               ;

/* A field declaration consists of an accessibility specifier, a type name, an identifier, and a semicolon. */
FieldDeclaration = AccessibilitySpecifier TypeName ID SEMICOLON ;

/* A type declaration consists of an accessibility specifier, the keyword type, an identifier, a single equals
symbol, a string literal, and a semicolon */
TypeDeclaration = AccessibilitySpecifier TYPE ID EQL STRING_LITERAL SEMICOLON ;

/* An accessibility specifier consists of either the keyword public, or of nothing at all. */
AccessibilitySpecifier = PUBLIC
                       |
                       ;

/* A type name is either a primitive type, an array type, or an identifier. */
/* Define ArrayType separately to prevent reduce-reduce conflict */
TypeName = PrimitiveType
         |  ArrayType
         |  ID
         ;
         
/* A primitive type is one of the keywords void, boolean and int. */
PrimitiveType = VOID
              | BOOLEAN
              | INT
              ;
              
/* An array type is a type name, followed by a left bracket, followed by a right bracket.  */
/* We separate into ArrayType, PrimitiveType and ID to remove shift-reduce conflicts */
ArrayType = ArrayType LBRACKET RBRACKET
          | PrimitiveType LBRACKET RBRACKET
          | ID LBRACKET RBRACKET
          ; 
          

/* A parameter list is a possibly empty list of parameters separated by commas. A parameter is a type name
followed by an identifier. */
ParameterList = NonEmptyParameterList
              |
              ;
      
NonEmptyParameterList = Parameter COMMA NonEmptyParameterList
                      |  Parameter
                      ;

/* A parameter is a type name followed by an identifier. */
Parameter = TypeName ID ;

/*A statement is one of the following: */
Statement = Localvardeclaration 
          | BlockStatement
          | IfStatement
          | WhileStatement
          | BreakStatement
          | ReturnStatement
          | ExpressionStatement
          ;

/* a local variable declaration, which consists of a type name, followed by an identifier, followed by a
semicolon */
Localvardeclaration = TypeName ID SEMICOLON ;

/* a block of statements, which consists of an opening curly brace, followed by a possibly empty list of
statements, followed by a closing curly brace */
BlockStatement = LCURLY StatementList RCURLY ;

StatementList = Statement StatementList
              |
              ;

/* an if statement, which consists of an if keyword, an opening parenthesis, an expression, a closing
parenthesis, a statement, an else keyword, and another statement; optionally, the else keyword and the
last statement may be missing */
IfStatement = IF LPAREN Expression RPAREN Statement IfTail ;

IfTail = ELSE Statement
       |
       ;

/* a while statement, which consists of a while keyword, an opening parenthesis, an expression, a closing
parenthesis, and a statement */
WhileStatement = WHILE LPAREN Expression RPAREN Statement ;

/* a break statement, which consists of a break keyword followed by a semicolon; */
BreakStatement = BREAK SEMICOLON ;

/* a return statement, which consists of a return keyword, followed by an optional expression, followed by
a semicolon */
ReturnStatement = RETURN SEMICOLON
                | RETURN Expression SEMICOLON
                ;
/* an expression statement, which consists of an expression followed by a semicolon. */
ExpressionStatement = Expression SEMICOLON ;

/* An expression is either an assignment or a right hand side expression */
Expression = Assignment
           | RHSExpression
           ;

/* An assignment is a left hand side expression, followed by a single equals sign, followed by an expression */
Assignment = LHSExpression EQL Expression ;

/* A left hand side expression is either an identifier or an array access */
LHSExpression = ID
              | ArrayAccess
              ;

/* An array access is a left hand side
expression, followed by an opening bracket, followed by an expression, followed by a closing bracket */
/* Based on tutorial */
ArrayAccess = ID LBRACKET Expression RBRACKET
            | ArrayAccess LBRACKET Expression RBRACKET ; /* Nested arrays */

/* A right hand side expression is an arithmetic expression, optionally followed by a comparison operator and
another arithmetic expression. */
RHSExpression = ArithmeticExpression
              | ArithmeticExpression ComparisonOperator ArithmeticExpression
              ;
/* A comparison operator is one of EQEQ, NEQ, LT, LEQ, GT, GEQ */
ComparisonOperator = EQEQ
                   | NEQ
                   | LT
                   | LEQ
                   | GT
                   | GEQ
                   ;

/* An arithmetic expression is either an arithmetic expression, followed by an additive operator, followed by a
term; or just a term.  */
ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
                     | Term
                     ;

/* An additive operator is either PLUS or MINUS. */
AdditiveOperator = PLUS
                 | MINUS
                 ;

/* A term is either a term, followed by a multiplicative operator, followed by a factor; or just a factor */
Term = Term MultiplicativeOperator Factor
     | Factor
     ;

/* A multiplicative operator is one of TIMES, DIV, MOD */
MultiplicativeOperator = TIMES
                       | DIV
                       | MOD
                       ;

/* A factor is either a MINUS followed by a factor, or a primary expression. */
Factor = MINUS Factor
       | PrimaryExpression
       ;                 

/* A primary expression is one of the following:
a left hand side expression
a function call
an array expression
a string literal
an integer literal
one of the Boolean literals TRUE and FALSE
a parenthesised expression */
PrimaryExpression = LHSExpression
                  | FunctionCall
                  | ArrayExpression
                  | STRING_LITERAL
                  | INT_LITERAL
                  | Boolean
                  | ParenthesizedExpression
                  ;

/* a function call: an identifier, followed by an opening parenthesis, followed by a possibly empty list of
expressions separated by comma, followed by a closing parenthesis */
FunctionCall = ID LPAREN ExpressionLists RPAREN ;

/* a possibly empty list of expressions */
ExpressionLists = NonEmptyExpressionList
                |
                ;

/* a non-empty list of expressions */             
NonEmptyExpressionList = Expression COMMA NonEmptyExpressionList
                       | Expression
                       ;

/* an opening bracket, followed by a non-empty list of expressions separated by comma,
followed by a closing bracket */
ArrayExpression = LBRACKET NonEmptyExpressionList RBRACKET ;

/* a parenthesised expression: an opening parenthesis, followed by an expression, followed by a closing parenthesis. */
ParenthesizedExpression = LPAREN Expression RPAREN ;

Boolean = TRUE
        | FALSE
        ;

/**/